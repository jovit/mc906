{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","i","event","value","console","log","values","state","setState","Array","from","length","x","loadModel","bind","assertThisInitialized","predict","tf","model","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","v","push","err","return","pred","readable_output","dataSync","c","document","getElementById","ctx","getContext","imgd","map","it","Math","round","imgData","createImageData","data","setTransform","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","putImageData","imgPixels","Image","src","toDataURL","onload","clearRect","width","height","scale","drawImage","_this2","classes","react_default","a","createElement","className","Slider_default","key","container","slider","aria-labelledby","onChange","index_es","onClick","id","style","border","Component","withStyles","root","padding","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9005dd06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/lab/Slider'\nimport * as tf from '@tensorflow/tfjs';\nimport m from './model/model.json'\nimport { Button } from '@material-ui/core';\n\nconst styles = {\n  root: {\n    width: 300,\n  },\n  slider: {\n    padding: '22px 0px',\n  },\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      values: Array.from({length: 50}, (x,i) => 0)\n    }\n\n    this.loadModel = this.loadModel.bind(this);\n    this.predict = this.predict.bind(this);\n\n    this.loadModel()\n\n  }\n\n  async loadModel() {\n    const model = await tf.loadLayersModel(\"https://raw.githubusercontent.com/jovit/mc906/master/project_2/visualizer/src/model/model.json\");\n    this.model = model;\n  }\n\n  predict() {\n    const values = []\n    for (const v of this.state.values) {\n      values.push(v/100);\n    }\n\n    console.log(values)\n\n    const pred = this.model.predict([tf.tensor(values, [1,50])])\n    \n    const readable_output = pred.dataSync();\n    console.log(readable_output);\n\n\n    var c = document.getElementById(\"myCanvas\");\n    var ctx = c.getContext(\"2d\");\n\n    var imgd = pred.dataSync().map(it => it * 255).map(it => Math.round(it));\n\n    console.log(imgd)\n\n    // first, create a new ImageData to contain our pixels\n    var imgData = ctx.createImageData(28, 28); // width x height\n    var data = imgData.data;\n\n    // copy img byte-per-byte into our ImageData\n    for (var i = 0; i < imgd.length; i++) {\n        // red\n        data[i*4] = imgd[i];\n        // green\n        data[(i*4)+1] = imgd[i];\n        // blue\n        data[(i*4)+2] = imgd[i];\n        // alpha (always use max value)\n        data[(i*4)+3] = 255;\n    }\n\n    // reset canvas scale\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    // use nearest neighboor for scaling (no blur)\n    ctx.mozImageSmoothingEnabled = false;\n    ctx.webkitImageSmoothingEnabled = false;\n    // now we can draw our imagedata onto the canvas\n    ctx.putImageData(imgData, 0, 0);\n    // workaround to scale image data\n    var imgPixels = new Image();\n    // load canvas pixels\n    imgPixels.src = c.toDataURL();\n    imgPixels.onload = () => {\n        // clear canvas\n        ctx.clearRect(0, 0, c.width, c.height);\n        // scale content\n        ctx.scale(7.2, 7.2);\n        // draw image\n        ctx.drawImage(imgPixels, 0, 0);\n    }\n }\n\n  handleChange = (i) =>\n    (event, value) => {\n      console.log(i);\n      console.log(value)\n      const values = this.state.values\n      values[i] = value\n      this.setState({ values });\n    };\n\n render(){ \n  const { classes } = this.props;\n\n  return (\n    <div className=\"App\">\n\n          {Array.from({length: 50}, (x,i) => i).map(i => <Slider\n          key={i}\n          classes={{ container: classes.slider }}\n          value={this.state.values[i]}\n          aria-labelledby=\"label\"\n          onChange={this.handleChange(i)}\n          />)}\n\n          <Button onClick={this.predict}>Predict</Button>\n\n          <canvas width={200} height={200} id=\"myCanvas\"  style={{border:\"1px solid #000000\"}}></canvas>\n\n    </div>\n  );\n\n}}\n\nexport default withStyles(styles)(App);;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}